Inside The JavaScript Engine: How The Code Executes
---------------------------------------------------
- How the JavaScript code gets executed within the JavaScript Engine
    - Specifically the steps involved in executing the code


- Inside the JavaScript Engine
    - Two important concepts
        - Heap
            - It is responsible on memory allocation
                - Think of it as a long-term memory

            - It stores data used by JavaScript code in system memory
                - Browser taps into the computer's system memory
                - Host OS allocates memory (heap) for the browser application

            - It manages access of data to & from it

            - Functions are stored into the heap
      

        - Stack
            - Responsible in the execution context of the JavaScript code
                - Think of it as a short-term memory

            - It manages the program flow
                - Keeps control which function is current executing
                    - Tp which function it returns data

            - When the script runs, the stack becomes active
                - Starts with an anonymous code pushed unto the stack
          
            - Anonymous function get pushed into the stack first
            
            - For each function call, it gets pushed into the stack    
                - The topmost item in the stack is always the item that is currently executing
                
                - A function pops off from the stack when it is not required anymore
                    - The said function remains stored in the heap

                - Once everything is done
                    - The anonymous function gets popped off the stack

            - Ths stack can be viewed using Chrome Dev Tools
                - Click Sources tab
                - Choose a function with a return statement
                - Place a breakpoint on that line
                - Reload the page
                - Look at the Call Stack tab
                    - List of function names in the stack are displayed


- JavaScript is single-threaded
    - It basically means that JavaScript can only do one thing at a time
    - It calls one function at a time
        - The other functions wait for the response of that function


- Event Loop
    - It is NOT a part of the JavaScript Engine but of modern browsers

    - It helps with asynchronous code
        - Helps with things like event listeners

    - Pass information (events) to the browser
        - Does NOT involve the participation of the JavaScript Engine

        - Browser manages the defined event listeners
            - Pings the JavaScript Engine

            - Pushes the corresponding callback function of the associated into the stack
                - When the event when it is activated
                - Then pops off the stack after completing its task

